{"meta":{"title":"aghe blog","subtitle":"satorii","description":null,"author":"aghae","url":"http://localhost:4000","root":"/"},"pages":[{"title":"about","date":"2019-09-28T08:03:32.000Z","updated":"2019-09-28T13:07:39.673Z","comments":true,"path":"about/index.html","permalink":"http://localhost:4000/about/index.html","excerpt":"","text":"I am h.aghae ,a fullstack web developer. Education: Math. &amp; Comptuer Science - University of Polytechnic , Iran contact: Email , Telegram , GitHub Skills: Javascript(Esx,vue) ,Node(express) , python(django) ,php(lara) Experiences: 2016 - present : Freelance messaging app (nodejs, socket io,mongodb,redis) shopping software (nodejs,express,mongo) standalone vue component webmaster (bash,nginx, other linux managments) 2014 - 2016 : senior developer &amp; webmaster online shopping 2013 - 2014 : senior developer real state 2012- 2013 : Web Manager &amp; Developer education system civilization projects 2010-2012 : Web Manager &amp; Developer Shopping web software 2003-2008 : Software &amp; Web Developer Library Software CMS &amp; Hosting 1998-2003 : software &amp; web Programmer News ageny web app ,Telephone logger accounting &amp; misc softwares"},{"title":"category","date":"2019-09-28T08:01:54.000Z","updated":"2019-09-28T08:02:48.434Z","comments":true,"path":"category/index.html","permalink":"http://localhost:4000/category/index.html","excerpt":"","text":""},{"title":"tag","date":"2019-09-28T08:01:52.000Z","updated":"2019-09-28T08:02:14.534Z","comments":true,"path":"tag/index.html","permalink":"http://localhost:4000/tag/index.html","excerpt":"","text":""}],"posts":[{"title":"simple tunnel  with linux box","slug":"simple-tunnel-with-linux-box","date":"2019-09-28T11:00:05.000Z","updated":"2019-09-28T11:17:15.449Z","comments":true,"path":"post/simple-tunnel-with-linux-box/","link":"","permalink":"http://localhost:4000/post/simple-tunnel-with-linux-box/","excerpt":"","text":"Tunnel whole system to a ssh serverTo do what you are wanting, I recommend sshuttle https://github.com/apenwarr/sshuttle.install : sudo apt-get install sshuttlesshuttle -r username@sshserver 0.0.0.0/0 -vv –dnssshuttle –dns -vr username@sshserver 0.0.0.0/0 or Tunnel Specific Program via SocksIf you only want to tunnel specific programs I would recommend proxychains : This will start a “SOCKS” proxy listening on : ssh -fND 127.0.0.1:&lt;local port&gt; username@sshserver Then edit /etc/proxychains.conf to point to the same port as . proxychains &lt;program name&gt; Configuring a system-wide HTTP or SOCKS proxyexport http_proxy=http://127.0.0.1:9050export https_proxy=http://127.0.0.1:9050export ftp_proxy=http://127.0.0.1:9050export all_proxy=http://127.0.0.1:9050export no_proxy=”localhost,127.0.0.1,localaddress,.localdomain.com” Use a HTTP proxy for chrome:$ chrome-browser –proxy-server=”127.0.0.1:8123” –host-resolver-rules=”MAP * 0.0.0.0 , EXCLUDE foo.bar, *.domain” OR $ chrome-browser –proxy-server=”socks5://127.0.0.1:9050” –host-resolver-rules=”MAP * 0.0.0.0 , EXCLUDE *.youtube.*”","categories":[{"name":"Linux","slug":"Linux","permalink":"http://localhost:4000/categories/Linux/"}],"tags":[]},{"title":"howto  multi-lingual site with Hexo","slug":"howto-multi-lingual-site-with-Hexo","date":"2019-09-28T10:36:47.000Z","updated":"2019-09-28T13:21:17.707Z","comments":true,"path":"post/howto-multi-lingual-site-with-Hexo/","link":"","permalink":"http://localhost:4000/post/howto-multi-lingual-site-with-Hexo/","excerpt":"","text":"hexo is a nice &amp; powerfull SSG(static site generator) You can use internationalization to present your site in different languages. The default language is set by modifying the language setting in _config.yml. You can also set multiple languages and modify the order of default languages. 123language: - fa - en Language Files Language files can be YAML or JSON files. You should put them into the languages folder in the theme. There is support for the printf format in language files. 1234567index: title: Home add: Add video: zero: No videos one: One video other: %d videos Templates Use __ or _p helpers in templates to get the translated strings. The former is for normal usage and the latter is for plural strings. For example:en.yml 12345&lt;%= __(&apos;index.title&apos;) %&gt;// Home&lt;%= _p(&apos;index.video&apos;, 3) %&gt;// 3 videos Path You can set the language of pages in front-matter, or modify the i18n_dir setting in _config.yml to enable automatic detection by Hexo. 1i18n_dir: :lang The default value of i18n_dir setting is :lang, which means that Hexo will detect the language within the first segment of URL. For example: 123/index.html =&gt; en/archives/index.html =&gt; en/fa/index.html =&gt; fa The string will only be served as a language when the language file exists. So archives in /archives/index.html will not get served as a language.","categories":[{"name":"serverless","slug":"serverless","permalink":"http://localhost:4000/categories/serverless/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://localhost:4000/tags/hexo/"}]},{"title":"git cheatsheet","slug":"git cheatsheet","date":"2019-09-28T09:40:43.000Z","updated":"2019-09-28T14:03:18.899Z","comments":true,"path":"post/git cheatsheet/","link":"","permalink":"http://localhost:4000/post/git cheatsheet/","excerpt":"","text":"/*__Table__*/ table thead { text-align: left } @media screen and (max-width:600px) { table thead { display: none } table tr{display:block;border: 1px solid #ddd;margin-bottom:.5rem} table td{display:block;text-align: right;} td,th{ padding:1em; text-align:left; } table td::before { /* content: attr(data-label); */ float: left; /* font-weight: bold; */ /* text-transform: uppercase; */ } table td:nth-child(1) { background-color: #bfdeff; } table td:nth-child(1)::before { content: 'command:'; } table td:nth-child(2)::before { content: 'description:' } } Terminology Command Description repo A place where the history of your work/code is stored clone Copy a git repository so you can add to it fork (GitHub) Create your own server side copy of someone else’s repo commit A state of your project at a certain time branch A different line of development. A branch is just a “label” which points to a specific commit master The default branch we develop in origin The default upstream repo (Github) HEAD The current branch remote A repository stored on another computer Starting a repo Command Description git init Create a repo from existing data git clone &lt;repo url&gt; Clone a current repo (into a folder with same name as repo) git clone &lt;repo url&gt; &lt;folder name&gt; Clone a repo into a specific folder name git clone &lt;repo url&gt; . Clone a repo into current directory (should be an empty directory) git remote add origin http//github.com/username/&lt;repo name&gt;.git Create a remote repo named origin pointing at your Github repo (after you’ve already created the repo on Github) (used if you git init since the repo you created locally isn’t linked to a remote repo yet) git remote add origin git@github.com:username/&lt;repo name&gt;.git Create a remote repo named origin pointing at your Github repo (using SSH url instead of HTTP url) git remote Show the names of the remote repositories you’ve set up git remote -v Show the names and URLs of the remote repositories git remote rm &lt;remote name&gt; Remove a remote repository Showing/Undoing Changes Command Description git status Show the files changed git diff Show changes to files compared to last commit git diff &lt;filename&gt; Show changes in single file compared to last commit git diff &lt;commit id &gt; &lt;commit id 2&gt; Show changes between two different commits. git log Show history of changes git blame &lt;filename&gt; Show who changed each line of a file and when git reset -hard Go back to the last commit (will not delete new unstaged files) git revert HEAD Undo/revert last commit AND create a new commit git revert &lt;commit id&gt; Undo/revert a specific commit AND create a new commit Staging Command Description git add -A Stage all files (new, modified, and deleted) git add . Stage new and modified files (not deleted) git add -u Stage modified and deleted files (not new) git rm &lt;filename&gt; Remove a file and untrack it git rm &lt;filename&gt; -cached Untrack a file only. It will still exist. Usually you will add this file to .gitignore after rm Publishing Command Description git commit -m “message” Commit the local changes that were staged git commit -am “message” Stage files (modified and deleted, not new) and commit git stash Take the uncommitted work (modified tracked files and staged changes) and saves it git stash list Show list of stashes git stash apply Reapply the latest stashed contents git stash apply &lt;stash id&gt; Reapply a specific stash. (stash id = stash@{2}) git stash drop &lt;stash id&gt; Drop a specific stash git push Push your changes to the origin git push origin &lt;local branch name&gt; Push a branch to the origin git tag &lt;tag name&gt; Tag a version (ie v1.0). Useful for Github releases Updating &amp; Getting Code Command Description git fetch git pull Get the latest changes from origin AND merge git checkout -b origin/ Get a remote branch from origin into a local branch (naming the branch and switching to it) Branching Command Description git branch Show all branches (local) git branch -a Show all branches (local and remote) git branch &lt;branch name&gt; Create a branch from HEAD git checkout -b &lt;branch name&gt; Create a new branch and switch to it git checkout &lt;branch name&gt; Switch to an already created branch git push origin &lt;branch name&gt; Push a branch up to the origin (Github) git checkout -b origin/&lt;branch name&gt; Get a remote branch from origin into a local branch (naming the branch and switching to it) git push origin -delete &lt;branch name&gt; Delete a branch locally and remotely Branching(Advanced) Command Description git checkout master git merge &lt;branch name&gt; Merge a specific branch into the master branch. git rebase &lt;branch name&gt; Take all the changes in one branch and replay them on another. Usually used in a feature branch. Rebase the master to the feature branch so you are testing your feature on the latest main code base. Then merge to the master. git cherry-pick &lt;commit id&gt; Merge just one specific commit from another branch to your current branch.","categories":[{"name":"cheatsheet","slug":"cheatsheet","permalink":"http://localhost:4000/categories/cheatsheet/"}],"tags":[]},{"title":"markdown cheatsheet","slug":"markdown cheatsheet","date":"2019-09-28T09:09:31.000Z","updated":"2019-09-28T14:08:55.914Z","comments":true,"path":"post/markdown cheatsheet/","link":"","permalink":"http://localhost:4000/post/markdown cheatsheet/","excerpt":"","text":"Headings #&nbsp;Heading 1##&nbsp;Heading 2###&nbsp;Heading 3####&nbsp;Heading 4#####&nbsp;Heading 5######&nbsp;Heading 6 Italics *Italicised* or _Italicised_ Bold *Bold* or _Bold_ Strikethrough ~Oh no Blockquotes &gt; This is a block quote.&gt;&gt; This is a nested block quote. Unordered Lists (* or + or -) * Item&nbsp;&nbsp;&nbsp;* Sub item&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Subsub item* Item* Item* Item Ordered Lists 1. Item2. Item3. Item&nbsp;&nbsp;&nbsp; 1. Sub Item&nbsp;&nbsp;&nbsp; 2. Sub Item Code Blocks Code is indented by four spaces or a tab. or ``` print(“Hello World”);``` Code Spans To print Hello world, `print “Hello world”` Syntax Highlighting ```python &nbsp;if language == ‘python’: &nbsp;&nbsp;&nbsp;&nbsp; show_syntax_highlighting() ``` Horizontal Rules *** or — Tables | First Header | Second Header || ————- | ————- || Content Cell | Content Cell || Content Cell | Content Cell | Links [Link text](http://link.com/ “title ..”) Images ![Alt text](/path/to/img.jpg “title ..”)","categories":[{"name":"cheatsheet","slug":"cheatsheet","permalink":"http://localhost:4000/categories/cheatsheet/"}],"tags":[]},{"title":"serverless contact form","slug":"server-contact-form","date":"2019-09-26T21:24:25.000Z","updated":"2019-09-28T10:50:25.835Z","comments":true,"path":"post/server-contact-form/","link":"","permalink":"http://localhost:4000/post/server-contact-form/","excerpt":"Why go serverless? There are many benefits of making serverless applications, but in short, the main benefits are easy setup, no management, and less cost (free). simple contact form with formspree","text":"Why go serverless? There are many benefits of making serverless applications, but in short, the main benefits are easy setup, no management, and less cost (free). simple contact form with formspree 123456789&lt;form action=\"https://formspree.io/foo@bar\" method=\"POST\"&gt; &lt;input type=\"text\" name=\"name\"&gt;&lt;br&gt; &lt;select name='option'&gt;&lt;br&gt; &lt;option value=\"opt1\"&gt;Option1&lt;/option&gt; &lt;option value=\"opt2\"&gt;Option2&lt;/option&gt; &lt;/select&gt;&lt;br&gt; &lt;textarea cols=70 row=7 name='comment'&gt;Contact form test&lt;/textarea&gt; &lt;input type=\"submit\" value=\"Send\"&gt;&lt;/form&gt;","categories":[{"name":"serverless","slug":"serverless","permalink":"http://localhost:4000/categories/serverless/"}],"tags":[]},{"title":"insert javascript google recaptcha into your page","slug":"insert javascript google recaptcha into your page","date":"2019-09-26T20:51:28.000Z","updated":"2019-09-28T13:05:24.214Z","comments":true,"path":"post/insert javascript google recaptcha into your page/","link":"","permalink":"http://localhost:4000/post/insert javascript google recaptcha into your page/","excerpt":"pure javasript code for recatcha on serverless apps","text":"pure javasript code for recatcha on serverless apps msg-error { color: #c65848; } .g-recaptcha.error { border: solid 2px #c64848; padding: .2em; width: 19em; } Validate reCAPTCHA var captchaContainer = null; var loadCaptcha = function() { captchaContainer = grecaptcha.render('captcha_container', { 'sitekey' : 'Your sitekey', 'callback' : function(response) { console.log(response); } }); }; function validate(){ response = grecaptcha.getResponse(); if (response.length === 0) { console.log('invalidate') } else { console.log('validated') } } insert this into your html page: 12&lt;div id=\"captcha_container\"&gt;&lt;/div&gt;&lt;button onclick='validate()'&gt;Validate reCAPTCHA&lt;/button&gt; css style : 12345678910&lt;style&gt; msg-error &#123; color: #c65848; &#125; .g-recaptcha.error &#123; border: solid 2px #c64848; padding: .2em; width: 19em; &#125;&lt;/style&gt; and this is javascript for rendering google recaptcha &amp; validation it. put it Your sitekey for value of google recaptcha sitekey 1234567891011121314151617181920212223&lt;script&gt; var captchaContainer = null; var loadCaptcha = function() &#123; captchaContainer = grecaptcha.render('captcha_container', &#123; 'sitekey' : 'Your sitekey', 'callback' : function(response) &#123; console.log(response); &#125; &#125;); &#125;; function validate()&#123; response = grecaptcha.getResponse(); if (response.length === 0) &#123; console.log('err : invalidate') &#125; else &#123; console.log('succ: validated') &#125; &#125;&lt;/script&gt;&lt;script src=\"https://www.google.com/recaptcha/api.js?onload=loadCaptcha&amp;render=explicit\" async defer&gt;&lt;/script&gt;","categories":[{"name":"Javascript","slug":"Javascript","permalink":"http://localhost:4000/categories/Javascript/"}],"tags":[{"name":"captcha","slug":"captcha","permalink":"http://localhost:4000/tags/captcha/"}]}]}