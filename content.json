{"meta":{"title":"aghae","subtitle":"Don’t dream your life, live your dream.","description":null,"author":"aghae","url":"https://aghae.github.io","root":"/"},"pages":[{"title":"about","date":"2019-09-28T08:03:32.000Z","updated":"2019-10-01T13:45:28.000Z","comments":false,"path":"about/index.html","permalink":"https://aghae.github.io/about/index.html","excerpt":"","text":"I am h.aghae ,a fullstack web developer. Education: Math. &amp; Comptuer Science - University of Polytechnic , Iran contact: Email , Telegram , GitHub Skills: Javascript(Es[X],vue) ,Node(express) , python(django) ,php(lara) Experiences: 2016 - present : Freelance messaging app (nodejs, socket io,mongodb,redis) shopping software (nodejs,express,mongo) standalone vue component webmaster (bash,nginx, other linux managments) 2014 - 2016 : senior developer &amp; webmaster online shopping 2013 - 2014 : senior developer real state 2012- 2013 : Web Manager &amp; Developer education system census project 2010-2012 : Web Manager &amp; Developer Shopping web software 2003-2008 : Software &amp; Web Developer Library Software CMS &amp; Hosting 1998-2003 : software &amp; web Programmer News ageny web app ,Telephone logger Accounting &amp; Misc softwares"},{"title":"category","date":"2019-09-28T08:01:54.000Z","updated":"2019-10-01T13:42:08.000Z","comments":true,"path":"categories/index.html","permalink":"https://aghae.github.io/categories/index.html","excerpt":"","text":""},{"title":"search","date":"2019-10-01T12:35:11.000Z","updated":"2019-10-01T12:35:22.000Z","comments":true,"path":"search/index.html","permalink":"https://aghae.github.io/search/index.html","excerpt":"","text":""},{"title":"tag","date":"2019-09-28T08:01:52.000Z","updated":"2019-10-01T13:41:44.000Z","comments":true,"path":"tags/index.html","permalink":"https://aghae.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"8 secrets to success that you need to know","slug":"8-secrets-to-success-that-you-need-to-know","date":"2019-10-01T09:09:03.000Z","updated":"2019-10-01T09:27:58.000Z","comments":true,"path":"post/8-secrets-to-success-that-you-need-to-know/","link":"","permalink":"https://aghae.github.io/post/8-secrets-to-success-that-you-need-to-know/","excerpt":"","text":"The secret to success, the success of people, the reason for success Why do people succeed? Is it because of their success that they are smart or lucky? Neither of these two factors has been attributed to Richard St. John’s success. In fact, this speaker has achieved success in doing something you love. He has spent over a decade of his life studying, analyzing, and analyzing success stories of different people. The result of his extensive work is summarized in eight magical words, an amazing three minutes and a successful book. The project sparked an airplane and Bo questions that one of the passengers asked him about the real reasons for his success, which prompted Richard to spend 10 years of his life exploring the success process and interviewing over 500 highly successful people in various fields. Assign. He first sought out the reasons for their success, and then analyzed and analyzed the responses, collected the data in a regular database, and finally identified eight common characteristics of successful individuals. Accordingly he published the bestselling and successful book Eight Tips for Excellence, which is a valuable treasure trove of highly successful individuals. By writing and publishing this book, Richard shares these golden secrets with readers. These secrets help the audience succeed in the path they have taken and reach their goal of starting a business, changing the world, getting rid of poverty, forming a family, educating their children and more. . This book reinforces people’s self-confidence and identifies their potential and actual abilities. The following is a transcript of Richard St John’s amazing three-minute speech. Today’s three-minute brief lecture is an intensive two-hour lecture that I give to high school students. It all started the day I got on the plane and was on my way to the Ted Conference. It was almost seven years ago. Seated next to me was a teenage girl who seemed to be in high school. This girl had a very poor family and wanted to succeed in her life. He asked me a very simple question and said, “What makes it a success?” I felt bad for not being able to respond properly to this teenager. When I got off the plane and arrived at the Ted Conference, at the very beginning of the landing, I suddenly said to myself, “God! I’m in a room full of successful people. Wouldn’t it be better to ask the same reasons and reasons for their success and share their answers with children and adolescents? And today, seven years have passed since that fateful day, and I have interviewed 500 successful people during this time, and I intend to introduce you to what makes this a success. The secret to success, the success of people, the reason for success Passion; our motivation for the journeyThe first factor in success is passion. Freeman Thomas, car designer at Daimler Chrysler, sees passion as the motivating and driving factor for success, so successful people do something they love and not just give them more motivation. . The interesting thing is that if you do something with interest, you get money and income on your own. Work for you like funThe second factor is labor. Rupert Murdoch, a well-known CEO of several large and successful companies and one of the world’s media giants, considers work and effort a necessary factor for success. According to him, nothing is easy to achieve and the work is fun and entertaining.You heard right that Rupert Murdoch considers work to be fun, so successful people find it fun to work hard. In fact, these people are not addicts and really enjoy their work. Continuous practice and nothing moreAlex Garda, CEO of one of the most successful computer game makers, knows the secret to success. In his opinion, success is not strange and depends on a magic formula and only requires practice and practice. Focus on the single goalThe next factor is concentration. Filmmaker Norman Joyce believes that one must focus on one goal in order to succeed. The persuasive willNow it’s time for the will. Maritime scientist David Gallo considers physical and mental will to be one of the most important factors for success and emphasizes it. Successful people, with their strong will, build confidence in themselves and release themselves from doubt and embarrassment. Famous American actress Goldie Haven admits she was initially skeptical of herself and her abilities and didn’t think herself smart enough. He thought he would never succeed, but persuading and creating the will was not always easy. Mothers are always a good source of motivation, determination and perseverance. Frank Gray, a well-known architect of architecture, sees his mother as motivating and determined. Providing valuable servicesServing others is the seventh success factor. Sherwin Nuland, a professor of surgery at Yale University in America, considers serving as a doctor a special privilege. Many children and teenagers are dreaming of becoming a millionaire someday, so it is important to teach these children that they can achieve and become rich by providing valuable service to others. Lean and creative ideasPossessing pure and valuable ideas is one of the key elements for success. “I had a great idea, and I wanted to launch the first PC and PC software company,” says Bill Gates, CEO of Microsoft. I think Gates’s idea was also very good. Creating pure ideas is not a strange process; in fact, it consists of a very simple process, with attention to surroundings and curiosity being essential elements. Resistance to adverse eventsFinally came the eighth factor, persistence. You have to be stubborn to fail, not to lose your temper, to resist the hardships, and ultimately not to be criticized, rejected, pressured, and abused. Believe me, with these eight factors, you can easily become a successful person. Trust me and put these eight tips at the forefront of your work. I’m sure you will never regret it.","categories":[{"name":"lifestyle","slug":"lifestyle","permalink":"https://aghae.github.io/categories/lifestyle/"}],"tags":[]},{"title":"Some usefull javascript tools","slug":"some-usefull-javascript-tools","date":"2019-09-30T10:19:01.000Z","updated":"2019-09-30T11:12:46.000Z","comments":true,"path":"post/some-usefull-javascript-tools/","link":"","permalink":"https://aghae.github.io/post/some-usefull-javascript-tools/","excerpt":"","text":"FrontExpressAn Express.js-Style router for the front-end ✔️ You already know ExpressJS then you know FrontExpress ✔️ Simple, minimal core extendable through plugins ✔️ Lighweight framework 3.55kb min+gzip ✔️ Build your front-end application by handling routes ✔️ Ideal for Single Page Application ✔️ Manage ajax requests and browser history Official FrontExpress website Lodash A modern JavaScript utility library delivering modularity, performance &amp; extras. Official Loadash website Underscore.jsUnderscore is a JavaScript library that provides a whole mess of useful functional programming helpers without extending any built-in objects.Underscore provides over 100 functions that support both your favorite workaday functional helpers: map, filter, invoke — as well as more specialized goodies: function binding, javascript templating, creating quick indexes, deep equality testing, and so on. Official Underscore website PPO Every frontend developer has written his own utils library, and we often write methods that are easily forgotten and highly used. ppo is a super small and useful utils library for JavaScript. It and lodash underscore lazy.js almost no coupling. I sorted out the most frequently used function functions in everyday development. These functions are almost ubiquitous in your development, and they are not found in lodash underscore. ppo little poor, gzip less than 3k, so a library you can use it anytime, anywhere without worrying about anything. Official PPO website MomentsParse, validate, manipulate, and display dates and times in JavaScript. Format Dates 12345moment().format('MMMM Do YYYY, h:mm:ss a'); // September 30th 2019, 1:55:35 pmmoment().format('dddd'); // Mondaymoment().format(\"MMM Do YY\"); // Sep 30th 19moment().format('YYYY [escaped] YYYY'); // 2019 escaped 2019moment().format(); // 2019-09-30T13:55:35+03:30 Calendar Time 12345678moment().subtract(10, 'days').calendar(); // 09/20/2019moment().subtract(6, 'days').calendar(); // Last Tuesday at 1:56 PMmoment().subtract(3, 'days').calendar(); // Last Friday at 1:56 PMmoment().subtract(1, 'days').calendar(); // Yesterday at 1:56 PMmoment().calendar(); // Today at 1:56 PMmoment().add(1, 'days').calendar(); // Tomorrow at 1:56 PMmoment().add(3, 'days').calendar(); // Thursday at 1:56 PMmoment().add(10, 'days').calendar(); // 10/10/2019 … Official Moment website MarkaBeautiful transformable iconsbuilt for the web. 1234var m = new Marka('#icon');m.set('circle') .color('#FF6600') .size('50'); Official Marka website LocalTunnelLocaltunnel allows you to easily share a web service on your local development machine without messing with DNS and firewall settings. Localtunnel will assign you a unique publicly accessible url that will proxy all requests to your locally running webserver. 12$ npm install -g localtunnel$ lt --port 8000 Features Secure https for all tunnels Show your work to anyone Use the API to test webhooks Test your UI in cloud browsers Official LocalTunnel website ngrokPublic URLs for exposing your local web server.Public URLs for testing on mobile devices.Public URLs for building webhook integrations.Public URLs for sending previews to clients.Public URLs for testing your chatbot.Public URLs for demoing from your own machine.Public URLs for SSH access to your Raspberry Pi. Spend more time programming. One command for an instant, secure URL to your localhost server through any NAT or firewall. Official ngrok website PrismPrism is a lightweight, extensible syntax highlighter, built with modern web standards in mind. It’s used in thousands of websites, including some of those you visit daily. Dead simpleInclude prism.css and prism.js, use proper HTML5 code tags (code.language-xxxx), done! Light as a featherThe core is 2KB minified &amp; gzipped. Languages add 0.3-0.5KB each, themes are around 1KB. ExtensibleDefine new languages or extend existing ones. Add new features thanks to Prism’s plugin architecture. IntuitiveLanguage classes are inherited so you can only define the language once for multiple code snippets. Blazing fastSupports parallelism with Web Workers, if available. Easy stylingAll styling is done through CSS, with sensible class names like .comment, .string, .property etc Official prism website PassportSimple, unobtrusive authentication for Nodejs Passport is authentication middleware for Node.js. Extremely flexible and modular, Passport can be unobtrusively dropped in to any Express-based web application. A comprehensive set of strategies support authentication using a username and password, Facebook, Twitter, and more. passport.authenticate(‘twitter’);passport.authenticate(‘facebook’);passport.authenticate(‘linkedin’);… Official passport website Leafletan open-source JavaScript library for mobile-friendly interactive maps Leaflet is the leading open-source JavaScript library for mobile-friendly interactive maps. Weighing just about 38 KB of JS, it has all the mapping features most developers ever need. Official Leaflet website MarkedA markdown parser and compiler. Built for speed. low-level compiler for parsing markdown without caching or blocking for long periods of time built for speed light-weight while implementing all markdown features from the supported flavors &amp; specifications works in a browser, on a server, or from a command line interface (CLI) CLI 12345$ marked -o hello.htmlhello world^D$ cat hello.html&lt;p&gt;hello world&lt;/p&gt; Browser 123456789101112131415&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"/&gt; &lt;title&gt;Marked in the browser&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"content\"&gt;&lt;/div&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/marked/marked.min.js\"&gt;&lt;/script&gt; &lt;script&gt; document.getElementById('content').innerHTML = marked('# Marked in the browser\\n\\nRendered by **marked**.'); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; Official Marked website","categories":[{"name":"Javascript","slug":"Javascript","permalink":"https://aghae.github.io/categories/Javascript/"}],"tags":[]},{"title":"Nekodb A tiny ODM for Nedb and Mongodb","slug":"Nekodb A tiny ODM for Nedb and Mongodb","date":"2019-09-30T08:45:25.000Z","updated":"2019-10-01T14:21:02.000Z","comments":true,"path":"post/Nekodb A tiny ODM for Nedb and Mongodb/","link":"","permalink":"https://aghae.github.io/post/Nekodb A tiny ODM for Nedb and Mongodb/","excerpt":"","text":"The Ne comes from NeDB, and ko refers to the Japanese diminuitive “ko” (小) or little. What is Nedb? NeDB is a lightweight database written entirely in Javascript, and that implements the well-known and loved MongoDB API. It is packaged as a Node module that be used with a simple require and can be used as an in-memory only or persistent datastore. You can think of it as SQLite for MongoDB projects. NekoDB comes with NeDB built in, so you can access a Mongo-like database, without actually installing or running a database at all. NeDB is suitable for datasets in the range of tens of thousands of documents. It is perfect for develop or small &amp; medium websites. For larger datasets, it is recommended you upgrade to MongoDB. To build the simplest, easiest to use ODM Stay as close to MongoDB syntax as possible Provide model validation and model referencing Beyond that, just provide a thin wrapper over the native functionality Support NeDB and MongoDB with an identical interface Promisify NeDB: no callback hell, only lovely Promises You can use it as async await in nodejs 7.6 &amp; more Connecting and creating schemas123456789101112131415161718192021222324252627282930const ko = require('nekodb')ko.connect(&#123; client: 'nedb', filepath: __dirname + '/db' &#125;)Orko.connect(&#123; client: 'nedb', inMemory: true &#125;)ko.models(&#123; Celebrity: &#123; name: ko.String[50], age: ko.Number.integer(), birthday: ko.Date, instagram: ko.String[30], followers: ko.Number &#125;, Family: &#123; name: ko.String, members: [ko.models.Celebrity], city: ko.String &#125;&#125;) if you want to connect mongodb rather than nedb 1234567ko.connect(&#123; client: 'mongodb', username: 'root', password: 'mongopassword', address: 'localhost:27017', database: 'nekodb'&#125;) or 1234ko.connect(&#123; client: 'mongodb', url: 'mongodb://username:password@localhost:27017/nekodb'&#125;) Creating a model123456789101112const celebrity = ko.models.Celebrity.create(&#123; name: 'Kim Kardashian West', age: 37, birthday: new Date('1980-10-21'), instagram: '@kimkardashian', followers: 1080000&#125;)celebrity.save().then(instance =&gt; &#123; console.log(instance) // instance will have been assigned an _id&#125;) if you want to use async await instead of promise call: 12instance = await celebrity.save()console.log(instance) Finding models1234567ko.models.Celebrity.find(&#123;&#125;).then(instances =&gt; &#123; console.log(instances)&#125;)ko.models.Celebrity.findOne(&#123;name: 'Kanye West'&#125;).then(instance =&gt; &#123; console.log(instance)&#125;) Updating a model1234ko.models.Celebrity.findOne(&#123;name: 'Kim Kardashian'&#125;).then(instance =&gt; &#123; instance.name = 'Kim Kardashian West' return instance.save()&#125;) Deleting models123ko.models.Celebrity.deleteOne(&#123;name: 'Johnny Depp'&#125;).then(deletedCount =&gt; &#123; console.log(deletedCount)&#125;) that’s it.It has more features that you can see them on NEKDODB","categories":[{"name":"database","slug":"database","permalink":"https://aghae.github.io/categories/database/"}],"tags":[{"name":"nedb","slug":"nedb","permalink":"https://aghae.github.io/tags/nedb/"},{"name":"mongo","slug":"mongo","permalink":"https://aghae.github.io/tags/mongo/"}]},{"title":"simple tunnel  with linux box","slug":"simple-tunnel-with-linux-box","date":"2019-09-21T10:00:05.000Z","updated":"2019-09-29T16:44:02.000Z","comments":true,"path":"post/simple-tunnel-with-linux-box/","link":"","permalink":"https://aghae.github.io/post/simple-tunnel-with-linux-box/","excerpt":"","text":"Tunnel whole system to a ssh serverTo do what you are wanting, I recommend sshuttle https://github.com/apenwarr/sshuttle.install : sudo apt-get install sshuttlesshuttle -r username@sshserver 0.0.0.0/0 -vv –dnssshuttle –dns -vr username@sshserver 0.0.0.0/0 or Tunnel Specific Program via SocksIf you only want to tunnel specific programs I would recommend proxychains : This will start a “SOCKS” proxy listening on : ssh -fND 127.0.0.1:&lt;local port&gt; username@sshserver Then edit /etc/proxychains.conf to point to the same port as . proxychains &lt;program name&gt; Configuring a system-wide HTTP or SOCKS proxyexport http_proxy=http://127.0.0.1:9050export https_proxy=http://127.0.0.1:9050export ftp_proxy=http://127.0.0.1:9050export all_proxy=http://127.0.0.1:9050export no_proxy=”localhost,127.0.0.1,localaddress,.localdomain.com” Use a HTTP proxy for chrome:$ chrome-browser –proxy-server=”127.0.0.1:8123” –host-resolver-rules=”MAP * 0.0.0.0 , EXCLUDE foo.bar, *.domain” OR $ chrome-browser –proxy-server=”socks5://127.0.0.1:9050” –host-resolver-rules=”MAP * 0.0.0.0 , EXCLUDE *.youtube.*”","categories":[{"name":"Linux","slug":"Linux","permalink":"https://aghae.github.io/categories/Linux/"}],"tags":[{"name":"security","slug":"security","permalink":"https://aghae.github.io/tags/security/"}]},{"title":"howto  multi-lingual site with Hexo","slug":"howto-multi-lingual-site-with-Hexo","date":"2019-09-13T09:36:47.000Z","updated":"2019-09-29T16:08:34.000Z","comments":true,"path":"post/howto-multi-lingual-site-with-Hexo/","link":"","permalink":"https://aghae.github.io/post/howto-multi-lingual-site-with-Hexo/","excerpt":"","text":"hexo is a nice &amp; powerfull SSG(static site generator) You can use internationalization to present your site in different languages. The default language is set by modifying the language setting in _config.yml. You can also set multiple languages and modify the order of default languages. 123language: - fa - en Language Files Language files can be YAML or JSON files. You should put them into the languages folder in the theme. There is support for the printf format in language files. 1234567index: title: Home add: Add video: zero: No videos one: One video other: %d videos Templates Use __ or _p helpers in templates to get the translated strings. The former is for normal usage and the latter is for plural strings. For example:en.yml 12345&lt;%= __(&apos;index.title&apos;) %&gt;// Home&lt;%= _p(&apos;index.video&apos;, 3) %&gt;// 3 videos Path You can set the language of pages in front-matter, or modify the i18n_dir setting in _config.yml to enable automatic detection by Hexo. 1i18n_dir: :lang The default value of i18n_dir setting is :lang, which means that Hexo will detect the language within the first segment of URL. For example: 123/index.html =&gt; en/archives/index.html =&gt; en/fa/index.html =&gt; fa The string will only be served as a language when the language file exists. So archives in /archives/index.html will not get served as a language.","categories":[{"name":"serverless","slug":"serverless","permalink":"https://aghae.github.io/categories/serverless/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://aghae.github.io/tags/hexo/"}]},{"title":"git cheatsheet","slug":"git cheatsheet","date":"2019-08-09T08:40:43.000Z","updated":"2019-09-29T16:08:36.000Z","comments":true,"path":"post/git cheatsheet/","link":"","permalink":"https://aghae.github.io/post/git cheatsheet/","excerpt":"","text":"/*__Table__*/ table thead { text-align: left } @media screen and (max-width:600px) { table thead { display: none } table tr{display:block;border: 1px solid #ddd;margin-bottom:.5rem} table td{display:block;text-align: right;} td,th{ padding:1em; text-align:left; } table td::before { /* content: attr(data-label); */ float: left; /* font-weight: bold; */ /* text-transform: uppercase; */ } table td:nth-child(1) { background-color: #bfdeff; } table td:nth-child(1)::before { content: 'command:'; } table td:nth-child(2)::before { content: 'description:' } } Terminology Command Description repo A place where the history of your work/code is stored clone Copy a git repository so you can add to it fork (GitHub) Create your own server side copy of someone else’s repo commit A state of your project at a certain time branch A different line of development. A branch is just a “label” which points to a specific commit master The default branch we develop in origin The default upstream repo (Github) HEAD The current branch remote A repository stored on another computer Starting a repo Command Description git init Create a repo from existing data git clone &lt;repo url&gt; Clone a current repo (into a folder with same name as repo) git clone &lt;repo url&gt; &lt;folder name&gt; Clone a repo into a specific folder name git clone &lt;repo url&gt; . Clone a repo into current directory (should be an empty directory) git remote add origin http//github.com/username/&lt;repo name&gt;.git Create a remote repo named origin pointing at your Github repo (after you’ve already created the repo on Github) (used if you git init since the repo you created locally isn’t linked to a remote repo yet) git remote add origin git@github.com:username/&lt;repo name&gt;.git Create a remote repo named origin pointing at your Github repo (using SSH url instead of HTTP url) git remote Show the names of the remote repositories you’ve set up git remote -v Show the names and URLs of the remote repositories git remote rm &lt;remote name&gt; Remove a remote repository Showing/Undoing Changes Command Description git status Show the files changed git diff Show changes to files compared to last commit git diff &lt;filename&gt; Show changes in single file compared to last commit git diff &lt;commit id &gt; &lt;commit id 2&gt; Show changes between two different commits. git log Show history of changes git blame &lt;filename&gt; Show who changed each line of a file and when git reset -hard Go back to the last commit (will not delete new unstaged files) git revert HEAD Undo/revert last commit AND create a new commit git revert &lt;commit id&gt; Undo/revert a specific commit AND create a new commit Staging Command Description git add -A Stage all files (new, modified, and deleted) git add . Stage new and modified files (not deleted) git add -u Stage modified and deleted files (not new) git rm &lt;filename&gt; Remove a file and untrack it git rm &lt;filename&gt; -cached Untrack a file only. It will still exist. Usually you will add this file to .gitignore after rm Publishing Command Description git commit -m “message” Commit the local changes that were staged git commit -am “message” Stage files (modified and deleted, not new) and commit git stash Take the uncommitted work (modified tracked files and staged changes) and saves it git stash list Show list of stashes git stash apply Reapply the latest stashed contents git stash apply &lt;stash id&gt; Reapply a specific stash. (stash id = stash@{2}) git stash drop &lt;stash id&gt; Drop a specific stash git push Push your changes to the origin git push origin &lt;local branch name&gt; Push a branch to the origin git tag &lt;tag name&gt; Tag a version (ie v1.0). Useful for Github releases Updating &amp; Getting Code Command Description git fetch git pull Get the latest changes from origin AND merge git checkout -b origin/ Get a remote branch from origin into a local branch (naming the branch and switching to it) Branching Command Description git branch Show all branches (local) git branch -a Show all branches (local and remote) git branch &lt;branch name&gt; Create a branch from HEAD git checkout -b &lt;branch name&gt; Create a new branch and switch to it git checkout &lt;branch name&gt; Switch to an already created branch git push origin &lt;branch name&gt; Push a branch up to the origin (Github) git checkout -b origin/&lt;branch name&gt; Get a remote branch from origin into a local branch (naming the branch and switching to it) git push origin -delete &lt;branch name&gt; Delete a branch locally and remotely Branching(Advanced) Command Description git checkout master git merge &lt;branch name&gt; Merge a specific branch into the master branch. git rebase &lt;branch name&gt; Take all the changes in one branch and replay them on another. Usually used in a feature branch. Rebase the master to the feature branch so you are testing your feature on the latest main code base. Then merge to the master. git cherry-pick &lt;commit id&gt; Merge just one specific commit from another branch to your current branch.","categories":[{"name":"cheatsheet","slug":"cheatsheet","permalink":"https://aghae.github.io/categories/cheatsheet/"}],"tags":[]},{"title":"markdown cheatsheet","slug":"markdown cheatsheet","date":"2019-08-03T08:09:31.000Z","updated":"2019-09-29T16:52:52.000Z","comments":true,"path":"post/markdown cheatsheet/","link":"","permalink":"https://aghae.github.io/post/markdown cheatsheet/","excerpt":"","text":"Headings #&nbsp;Heading 1##&nbsp;Heading 2###&nbsp;Heading 3####&nbsp;Heading 4#####&nbsp;Heading 5######&nbsp;Heading 6 Italics *Italicised* or _Italicised_ Bold *Bold* or _Bold_ Strikethrough ~Oh no Blockquotes &gt; This is a block quote.&gt;&gt; This is a nested block quote. Unordered Lists (* or + or -) * Item&nbsp;&nbsp;&nbsp;* Sub item&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Subsub item* Item* Item* Item Ordered Lists 1. Item2. Item3. Item&nbsp;&nbsp;&nbsp; 1. Sub Item&nbsp;&nbsp;&nbsp; 2. Sub Item Code Blocks Code is indented by four spaces or a tab. or ``` print(“Hello World”);``` Code Spans To print Hello world, `print “Hello world”` Syntax Highlighting ```python &nbsp;if language == ‘python’: &nbsp;&nbsp;&nbsp;&nbsp; show_syntax_highlighting() ``` Horizontal Rules *** or — Tables | First Header | Second Header || ————- | ————- || Content Cell | Content Cell || Content Cell | Content Cell | Links [Link text](http://link.com/ “title ..”) Images ![Alt text](/path/to/img.jpg “title ..”)","categories":[{"name":"cheatsheet","slug":"cheatsheet","permalink":"https://aghae.github.io/categories/cheatsheet/"}],"tags":[]},{"title":"A free serverless contact form","slug":"server-contact-form","date":"2019-07-28T20:24:25.000Z","updated":"2019-09-29T16:08:30.000Z","comments":true,"path":"post/server-contact-form/","link":"","permalink":"https://aghae.github.io/post/server-contact-form/","excerpt":"Why go serverless? There are many benefits of making serverless applications, but in short, the main benefits are easy setup, no management, and less cost (free). simple contact form with formspree","text":"Why go serverless? There are many benefits of making serverless applications, but in short, the main benefits are easy setup, no management, and less cost (free). simple contact form with formspree 123456789&lt;form action=\"https://formspree.io/foo@bar\" method=\"POST\"&gt; &lt;input type=\"text\" name=\"name\"&gt;&lt;br&gt; &lt;select name='option'&gt;&lt;br&gt; &lt;option value=\"opt1\"&gt;Option1&lt;/option&gt; &lt;option value=\"opt2\"&gt;Option2&lt;/option&gt; &lt;/select&gt;&lt;br&gt; &lt;textarea cols=70 row=7 name='comment'&gt;Contact form test&lt;/textarea&gt; &lt;input type=\"submit\" value=\"Send\"&gt;&lt;/form&gt; Formspree is open source project (view on Github,) and they provide instructions on how to run your own instance of Formspree on Heroku. Formspree uses reCAPTCHA to identify spam submissions. You can also add a honeypot field to your form with the name _gotcha.Extensibility You can start using Formspree without even visiting their website. Just point your form to https://formspree.io/$YOUR_EMAIL where $YOUR_EMAIL is the email you want submissions to be sent to. Once the form is configured correctly, submit it once. You should then receive an email from Formspree asking you to confirm your email address.","categories":[{"name":"serverless","slug":"serverless","permalink":"https://aghae.github.io/categories/serverless/"}],"tags":[]},{"title":"insert javascript google recaptcha into your page","slug":"insert javascript google recaptcha into your page","date":"2019-07-19T19:51:28.000Z","updated":"2019-09-29T16:46:52.000Z","comments":true,"path":"post/insert javascript google recaptcha into your page/","link":"","permalink":"https://aghae.github.io/post/insert javascript google recaptcha into your page/","excerpt":"pure javasript code for recatcha on serverless apps","text":"pure javasript code for recatcha on serverless apps msg-error { color: #c65848; } .g-recaptcha.error { border: solid 2px #c64848; padding: .2em; width: 19em; } Validate reCAPTCHA var captchaContainer = null; var loadCaptcha = function() { captchaContainer = grecaptcha.render('captcha_container', { 'sitekey' : 'Your sitekey', 'callback' : function(response) { console.log(response); } }); }; function validate(){ response = grecaptcha.getResponse(); if (response.length === 0) { console.log('invalidate') } else { console.log('validated') } } insert this into your html page: 12&lt;div id=\"captcha_container\"&gt;&lt;/div&gt;&lt;button onclick='validate()'&gt;Validate reCAPTCHA&lt;/button&gt; css style : 12345678910&lt;style&gt; msg-error &#123; color: #c65848; &#125; .g-recaptcha.error &#123; border: solid 2px #c64848; padding: .2em; width: 19em; &#125;&lt;/style&gt; and this is javascript for rendering google recaptcha &amp; validation it. put it Your sitekey for value of google recaptcha sitekey 1234567891011121314151617181920212223&lt;script&gt; var captchaContainer = null; var loadCaptcha = function() &#123; captchaContainer = grecaptcha.render('captcha_container', &#123; 'sitekey' : 'Your sitekey', 'callback' : function(response) &#123; console.log(response); &#125; &#125;); &#125;; function validate()&#123; response = grecaptcha.getResponse(); if (response.length === 0) &#123; console.log('err : invalidate') &#125; else &#123; console.log('succ: validated') &#125; &#125;&lt;/script&gt;&lt;script src=\"https://www.google.com/recaptcha/api.js?onload=loadCaptcha&amp;render=explicit\" async defer&gt;&lt;/script&gt;","categories":[{"name":"Javascript","slug":"Javascript","permalink":"https://aghae.github.io/categories/Javascript/"}],"tags":[{"name":"security","slug":"security","permalink":"https://aghae.github.io/tags/security/"}]}]}