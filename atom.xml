<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>aghae</title>
  
  <subtitle>Don’t dream your life, live your dream.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://aghae.github.io/"/>
  <updated>2019-09-30T09:37:05.038Z</updated>
  <id>https://aghae.github.io/</id>
  
  <author>
    <name>aghae</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nekodb A tiny ODM for Nedb and Mongodb</title>
    <link href="https://aghae.github.io/post/Nekodb%20A%20tiny%20ODM%20for%20Nedb%20and%20Mongodb/"/>
    <id>https://aghae.github.io/post/Nekodb A tiny ODM for Nedb and Mongodb/</id>
    <published>2019-09-30T08:45:25.000Z</published>
    <updated>2019-09-30T09:37:05.038Z</updated>
    
    <content type="html"><![CDATA[<p>The Ne comes from NeDB, and ko refers to the Japanese diminuitive “ko” (小) or little.</p><p>What is Nedb?</p><blockquote><p>NeDB is a lightweight database written entirely in Javascript, and that implements the well-known and loved MongoDB API. It is packaged as a Node module that be used with a simple require and can be used as an in-memory only or persistent datastore. You can think of it as SQLite for MongoDB projects.</p></blockquote><p>NekoDB comes with NeDB built in, so you can access a Mongo-like database, without actually installing or running a database at all. NeDB is suitable for datasets in the range of tens of thousands of documents. It is perfect for develop or small &amp; medium websites. For larger datasets, it is recommended you upgrade to MongoDB.</p><ul><li>To build the simplest, easiest to use ODM</li><li>Stay as close to MongoDB syntax as possible<ul><li>Provide model validation and model referencing</li><li>Beyond that, just provide a thin wrapper over the native functionality</li></ul></li><li><code>Support NeDB and MongoDB with an identical interface</code></li><li>Promisify NeDB: no callback hell, only lovely Promises</li><li>You can use it as <code>async await</code> in nodejs <code>7.6 &amp; more</code></li></ul><h2 id="Connecting-and-creating-schemas"><a href="#Connecting-and-creating-schemas" class="headerlink" title="Connecting and creating schemas"></a>Connecting and creating schemas</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ko = <span class="built_in">require</span>(<span class="string">'nekodb'</span>)</span><br><span class="line"></span><br><span class="line">ko.connect(&#123;</span><br><span class="line">    client: <span class="string">'nedb'</span>,</span><br><span class="line">    filepath: __dirname + <span class="string">'/db'</span>  </span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Or</span><br><span class="line"></span><br><span class="line">ko.connect(&#123;</span><br><span class="line">    client: <span class="string">'nedb'</span>,</span><br><span class="line">    inMemory: <span class="literal">true</span></span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ko.models(&#123;</span><br><span class="line">    Celebrity: &#123;</span><br><span class="line">        name: ko.String[<span class="number">50</span>],</span><br><span class="line">        age: ko.Number.integer(),</span><br><span class="line">        birthday: ko.Date,</span><br><span class="line">        instagram: ko.String[<span class="number">30</span>],</span><br><span class="line">        followers: ko.Number</span><br><span class="line">    &#125;,</span><br><span class="line">    Family: &#123;</span><br><span class="line">        name: ko.String,</span><br><span class="line">        members: [ko.models.Celebrity],</span><br><span class="line">        city: ko.String</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>if you want to connect mongodb rather than nedb</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ko.connect(&#123;</span><br><span class="line">    client: <span class="string">'mongodb'</span>,</span><br><span class="line">    username: <span class="string">'root'</span>,</span><br><span class="line">    password: <span class="string">'mongopassword'</span>,</span><br><span class="line">    address: <span class="string">'localhost:27017'</span>,</span><br><span class="line">    database: <span class="string">'nekodb'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ko.connect(&#123;</span><br><span class="line">    client: <span class="string">'mongodb'</span>,</span><br><span class="line">    url: <span class="string">'mongodb://username:password@localhost:27017/nekodb'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Creating-a-model"><a href="#Creating-a-model" class="headerlink" title="Creating a model"></a>Creating a model</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> celebrity = ko.models.Celebrity.create(&#123;</span><br><span class="line">    name: <span class="string">'Kim Kardashian West'</span>,</span><br><span class="line">    age: <span class="number">37</span>,</span><br><span class="line">    birthday: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'1980-10-21'</span>),</span><br><span class="line">    instagram: <span class="string">'@kimkardashian'</span>,</span><br><span class="line">    followers: <span class="number">1080000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">celebrity.save().then(<span class="function"><span class="params">instance</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(instance)</span><br><span class="line">    <span class="comment">// instance will have been assigned an _id</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>if you want to use async await instead of promise call:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">instance = <span class="keyword">await</span> celebrity.save()</span><br><span class="line"><span class="built_in">console</span>.log(instance)</span><br></pre></td></tr></table></figure><h2 id="Finding-models"><a href="#Finding-models" class="headerlink" title="Finding models"></a>Finding models</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ko.models.Celebrity.find(&#123;&#125;).then(<span class="function"><span class="params">instances</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(instances)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ko.models.Celebrity.findOne(&#123;<span class="attr">name</span>: <span class="string">'Kanye West'</span>&#125;).then(<span class="function"><span class="params">instance</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(instance)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Updating-a-model"><a href="#Updating-a-model" class="headerlink" title="Updating a model"></a>Updating a model</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ko.models.Celebrity.findOne(&#123;<span class="attr">name</span>: <span class="string">'Kim Kardashian'</span>&#125;).then(<span class="function"><span class="params">instance</span> =&gt;</span> &#123;</span><br><span class="line">    instance.name = <span class="string">'Kim Kardashian West'</span></span><br><span class="line">    <span class="keyword">return</span> instance.save()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Deleting-models"><a href="#Deleting-models" class="headerlink" title="Deleting models"></a>Deleting models</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ko.models.Celebrity.deleteOne(&#123;<span class="attr">name</span>: <span class="string">'Johnny Depp'</span>&#125;).then(<span class="function"><span class="params">deletedCount</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(deletedCount)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>that’s it.<br>It has more features that you can see them on <a href="https://github.com/4strid/nekodb" rel="noopener" target="_blank">NEKDODB</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The Ne comes from NeDB, and ko refers to the Japanese diminuitive “ko” (小) or little.&lt;/p&gt;
&lt;p&gt;What is Nedb?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NeDB is a 
      
    
    </summary>
    
    
      <category term="database" scheme="https://aghae.github.io/categories/database/"/>
    
    
      <category term="nedb" scheme="https://aghae.github.io/tags/nedb/"/>
    
      <category term="mongo" scheme="https://aghae.github.io/tags/mongo/"/>
    
  </entry>
  
  <entry>
    <title>simple tunnel  with linux box</title>
    <link href="https://aghae.github.io/post/simple-tunnel-with-linux-box/"/>
    <id>https://aghae.github.io/post/simple-tunnel-with-linux-box/</id>
    <published>2019-09-21T10:00:05.000Z</published>
    <updated>2019-09-29T16:44:02.933Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tunnel-whole-system-to-a-ssh-server"><a href="#Tunnel-whole-system-to-a-ssh-server" class="headerlink" title="Tunnel whole system to a ssh server"></a>Tunnel whole system to a ssh server</h2><p>To do what you are wanting, I recommend sshuttle <a href="https://github.com/apenwarr/sshuttle" rel="noopener" target="_blank">https://github.com/apenwarr/sshuttle</a>.<br>install :</p><blockquote><p>sudo apt-get install sshuttle<br>sshuttle -r username@sshserver 0.0.0.0/0 -vv –dns<br>sshuttle –dns -vr username@sshserver 0.0.0.0/0   or</p></blockquote><h2 id="Tunnel-Specific-Program-via-Socks"><a href="#Tunnel-Specific-Program-via-Socks" class="headerlink" title="Tunnel Specific Program via Socks"></a>Tunnel Specific Program via Socks</h2><p>If you only want to tunnel specific programs I would recommend proxychains :</p><ol><li><p>This will start a “SOCKS” proxy listening on :<br> ssh -fND 127.0.0.1:&lt;local port&gt; username@sshserver  </p></li><li><p>Then edit /etc/proxychains.conf to point to the same port as .</p></li><li><p>proxychains &lt;program name&gt;</p></li></ol><h2 id="Configuring-a-system-wide-HTTP-or-SOCKS-proxy"><a href="#Configuring-a-system-wide-HTTP-or-SOCKS-proxy" class="headerlink" title="Configuring a system-wide HTTP or SOCKS proxy"></a>Configuring a system-wide HTTP or SOCKS proxy</h2><p>export http_proxy=ht<span>tp://127.0.0.1:9050<br>export https_proxy=ht<span>tp://127.0.0.1:9050<br>export ftp_proxy=ht<span>tp://127.0.0.1:9050<br>export all_proxy=ht<span>tp://127.0.0.1:9050<br>export no_proxy=”localhost,127.0.0.1,localaddress,.localdomain.com”</span></span></span></span></p><p>Use a HTTP proxy for chrome:<br>$ chrome-browser –proxy-server=”127.0.0.1:8123”  –host-resolver-rules=”MAP * 0.0.0.0 , EXCLUDE foo.bar, *.domain”  </p><p>OR</p><p>$ chrome-browser –proxy-server=”socks5://127.0.0.1:9050”  –host-resolver-rules=”MAP * 0.0.0.0 , EXCLUDE *.youtube.*”  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Tunnel-whole-system-to-a-ssh-server&quot;&gt;&lt;a href=&quot;#Tunnel-whole-system-to-a-ssh-server&quot; class=&quot;headerlink&quot; title=&quot;Tunnel whole system to
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://aghae.github.io/categories/Linux/"/>
    
    
      <category term="security" scheme="https://aghae.github.io/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>howto  multi-lingual site with Hexo</title>
    <link href="https://aghae.github.io/post/howto-multi-lingual-site-with-Hexo/"/>
    <id>https://aghae.github.io/post/howto-multi-lingual-site-with-Hexo/</id>
    <published>2019-09-13T09:36:47.000Z</published>
    <updated>2019-09-29T16:08:35.743Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://hexo.io/" rel="noopener" target="_blank">hexo</a> is a nice &amp; powerfull SSG(static site generator)</p></blockquote><p>You can use internationalization to present your site in different languages.</p><p>The default language is set by modifying the language setting in _config.yml. You can also set multiple languages and modify the order of default languages.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">language:</span><br><span class="line">  - fa</span><br><span class="line">  - en</span><br></pre></td></tr></table></figure><p><strong>Language Files</strong></p><p>Language files can be YAML or JSON files. You should put them into the languages folder in the theme. There is support for the printf format in language files.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">index:</span><br><span class="line">  title: Home</span><br><span class="line">  add: Add</span><br><span class="line">  video:</span><br><span class="line">    zero: No videos</span><br><span class="line">    one: One video</span><br><span class="line">    other: %d videos</span><br></pre></td></tr></table></figure><p><strong>Templates</strong></p><p>Use __ or _p helpers in templates to get the translated strings. The former is for normal usage and the latter is for plural strings. For example:<br>en.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= __(&apos;index.title&apos;) %&gt;</span><br><span class="line">// Home</span><br><span class="line"></span><br><span class="line">&lt;%= _p(&apos;index.video&apos;, 3) %&gt;</span><br><span class="line">// 3 videos</span><br></pre></td></tr></table></figure><p><strong>Path</strong></p><p>You can set the language of pages in front-matter, or modify the i18n_dir setting in _config.yml to enable automatic detection by Hexo.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i18n_dir: :lang</span><br></pre></td></tr></table></figure><p>The default value of i18n_dir setting is :lang, which means that Hexo will detect the language within the first segment of URL. For example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/index.html =&gt; en</span><br><span class="line">/archives/index.html =&gt; en</span><br><span class="line">/fa/index.html =&gt; fa</span><br></pre></td></tr></table></figure><p>The string will only be served as a language when the language file exists. So archives in /archives/index.html will not get served as a language.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://hexo.io/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;hexo&lt;/a&gt; is a nice &amp;amp; powerfull SSG(static site generator)&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="serverless" scheme="https://aghae.github.io/categories/serverless/"/>
    
    
      <category term="hexo" scheme="https://aghae.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>git cheatsheet</title>
    <link href="https://aghae.github.io/post/git%20cheatsheet/"/>
    <id>https://aghae.github.io/post/git cheatsheet/</id>
    <published>2019-08-09T08:40:43.000Z</published>
    <updated>2019-09-29T16:08:36.771Z</updated>
    
    <content type="html"><![CDATA[<style>  /*__Table__*/  table thead { text-align: left }  @media screen and (max-width:600px) {      table thead { display: none }      table tr{display:block;border: 1px solid #ddd;margin-bottom:.5rem}      table td{display:block;text-align: right;}      td,th{          padding:1em;          text-align:left;      }      table td::before {          /* content:  attr(data-label); */          float: left;          /* font-weight: bold; */          /* text-transform: uppercase; */      }      table td:nth-child(1) {          background-color: #bfdeff;      }      table td:nth-child(1)::before {          content: 'command:';      }       table td:nth-child(2)::before {          content: 'description:'      }  }</style><h2 id="Terminology"><a href="#Terminology" class="headerlink" title="Terminology"></a>Terminology</h2><table><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td>repo</td><td>A place where the history of your work/code is stored</td></tr><tr><td>clone</td><td>Copy a git repository so you can add to it</td></tr><tr><td>fork (GitHub)</td><td>Create your own server side copy of someone else’s repo</td></tr><tr><td>commit</td><td>A state of your project at a certain time</td></tr><tr><td>branch</td><td>A different line of development. A branch is just a “label” which points to a specific commit</td></tr><tr><td>master</td><td>The default branch we develop in</td></tr><tr><td>origin</td><td>The default upstream repo (Github)</td></tr><tr><td>HEAD</td><td>The current branch</td></tr><tr><td>remote</td><td>A repository stored on another computer</td></tr></tbody></table><h2 id="Starting-a-repo"><a href="#Starting-a-repo" class="headerlink" title="Starting a repo"></a>Starting a repo</h2><table><thead><tr><th><div style="width:250px">Command</div></th><th>Description</th></tr></thead><tbody><tr><td>git init</td><td>Create a repo from existing data</td></tr><tr><td>git clone &lt;repo url&gt;</td><td>Clone a current repo (into a folder with same name as repo)</td></tr><tr><td>git clone &lt;repo url&gt;</td><td>&lt;folder name&gt;    Clone a repo into a specific folder name</td></tr><tr><td>git clone &lt;repo url&gt;</td><td>.    Clone a repo into current directory (should be an empty directory)</td></tr><tr><td>git remote add origin <br>ht<span>tp//github.com/username/&lt;repo name&gt;.git</span></td><td>Create a remote repo named origin pointing at your Github repo (after you’ve already created the repo on Github) (used if you git init since the repo you created locally isn’t linked to a remote repo yet)</td></tr><tr><td>git remote add origin <br>git@github.com:username/&lt;repo name&gt;.git</td><td>Create a remote repo named origin pointing at your Github repo (using SSH url instead of HTTP url)</td></tr><tr><td>git remote</td><td>Show the names of the remote repositories you’ve set up</td></tr><tr><td>git remote -v</td><td>Show the names and URLs of the remote repositories</td></tr><tr><td>git remote rm &lt;remote name&gt;</td><td>Remove a remote repository</td></tr></tbody></table><h2 id="Showing-Undoing-Changes"><a href="#Showing-Undoing-Changes" class="headerlink" title="Showing/Undoing Changes"></a>Showing/Undoing Changes</h2><table><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td>git status</td><td>Show the files changed</td></tr><tr><td>git diff</td><td>Show changes to files compared to last commit</td></tr><tr><td>git diff &lt;filename&gt;</td><td>Show changes in single file compared to last commit</td></tr><tr><td>git diff &lt;commit id &gt; &lt;commit id 2&gt;</td><td>Show changes between two different commits.</td></tr><tr><td>git log</td><td>Show history of changes</td></tr><tr><td>git blame &lt;filename&gt;</td><td>Show who changed each line of a file and when</td></tr><tr><td>git reset -hard</td><td>Go back to the last commit (will not delete new unstaged files)</td></tr><tr><td>git revert HEAD</td><td>Undo/revert last commit AND create a new commit</td></tr><tr><td>git revert &lt;commit id&gt;</td><td>Undo/revert a specific commit AND create a new commit</td></tr></tbody></table><h2 id="Staging"><a href="#Staging" class="headerlink" title="Staging"></a>Staging</h2><table><thead><tr><th><div style="width:200px">Command</div></th><th>Description</th></tr></thead><tbody><tr><td>git add -A</td><td>Stage all files (new, modified, and deleted)</td></tr><tr><td>git add .</td><td>Stage new and modified files (not deleted)</td></tr><tr><td>git add -u</td><td>Stage modified and deleted files (not new)</td></tr><tr><td>git rm &lt;filename&gt;</td><td>Remove a file and untrack it</td></tr><tr><td>git rm &lt;filename&gt; -cached</td><td>Untrack a file only. It will still exist. Usually you will add this file to .gitignore after rm</td></tr></tbody></table><h2 id="Publishing"><a href="#Publishing" class="headerlink" title="Publishing"></a>Publishing</h2><table><thead><tr><th><div style="width:300px">Command</div></th><th>Description</th></tr></thead><tbody><tr><td>git commit -m “message”</td><td>Commit the local changes that were staged</td></tr><tr><td>git commit -am “message”</td><td>Stage files (modified and deleted, not new) and commit</td></tr><tr><td>git stash</td><td>Take the uncommitted work (modified tracked files and staged changes) and saves it</td></tr><tr><td>git stash list</td><td>Show list of stashes</td></tr><tr><td>git stash apply</td><td>Reapply the latest stashed contents</td></tr><tr><td>git stash apply &lt;stash id&gt;</td><td>Reapply a specific stash. (stash id = stash@{2})</td></tr><tr><td>git stash drop &lt;stash id&gt;</td><td>Drop a specific stash</td></tr><tr><td>git push</td><td>Push your changes to the origin</td></tr><tr><td>git push origin &lt;local branch name&gt;</td><td>Push a branch to the origin</td></tr><tr><td>git tag &lt;tag name&gt;</td><td>Tag a version (ie v1.0). Useful for Github releases</td></tr></tbody></table><h2 id="Updating-amp-Getting-Code"><a href="#Updating-amp-Getting-Code" class="headerlink" title="Updating &amp; Getting Code"></a>Updating &amp; Getting Code</h2><table><thead><tr><th><div style="width:200px">Command</div></th><th>Description</th></tr></thead><tbody><tr><td>git</td><td>fetch</td></tr><tr><td>git pull</td><td>Get the latest changes from origin AND merge</td></tr><tr><td>git checkout -b <new branch name> origin/<branch name></branch></new></td><td>Get a remote branch from origin into a local branch (naming the branch and switching to it)</td></tr></tbody></table><h2 id="Branching"><a href="#Branching" class="headerlink" title="Branching"></a>Branching</h2><table><thead><tr><th><div style="width:300px">Command</div></th><th>Description</th></tr></thead><tbody><tr><td>git branch</td><td>Show all branches (local)</td></tr><tr><td>git branch -a</td><td>Show all branches (local and remote)</td></tr><tr><td>git branch &lt;branch name&gt;</td><td>Create a branch from HEAD</td></tr><tr><td>git checkout -b &lt;branch name&gt;</td><td>Create a new branch and switch to it</td></tr><tr><td>git checkout &lt;branch name&gt;</td><td>Switch to an already created branch</td></tr><tr><td>git push origin &lt;branch name&gt;</td><td>Push a branch up to the origin (Github)</td></tr><tr><td>git checkout -b <new branch name> origin/&lt;branch name&gt;</new></td><td>Get a remote branch from origin into a local branch (naming the branch and switching to it)</td></tr><tr><td>git push origin -delete &lt;branch name&gt;</td><td>Delete a branch locally and remotely</td></tr></tbody></table><h2 id="Branching-Advanced"><a href="#Branching-Advanced" class="headerlink" title="Branching(Advanced)"></a>Branching(Advanced)</h2><table><thead><tr><th><div style="width:200px">Command</div></th><th>Description</th></tr></thead><tbody><tr><td>git checkout master <br>git merge &lt;branch name&gt;</td><td>Merge a specific branch into the master branch.</td></tr><tr><td>git rebase &lt;branch name&gt;</td><td>Take all the changes in one branch and replay them on another. Usually used in a feature branch. Rebase the master to the feature branch so you are testing your feature on the latest main code base. Then merge to the master.</td></tr><tr><td>git cherry-pick &lt;commit id&gt;</td><td>Merge just one specific commit from another branch to your current branch.</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;style&gt;
  /*__Table__*/
  table thead { text-align: left }
  @media screen and (max-width:600px) {
      table thead { display: none }
     
      
    
    </summary>
    
    
      <category term="cheatsheet" scheme="https://aghae.github.io/categories/cheatsheet/"/>
    
    
  </entry>
  
  <entry>
    <title>markdown cheatsheet</title>
    <link href="https://aghae.github.io/post/markdown%20cheatsheet/"/>
    <id>https://aghae.github.io/post/markdown cheatsheet/</id>
    <published>2019-08-03T08:09:31.000Z</published>
    <updated>2019-09-29T16:52:52.730Z</updated>
    
    <content type="html"><![CDATA[<p>Headings</p><blockquote><p>#&nbsp;Heading 1<br>##&nbsp;Heading 2<br>###&nbsp;Heading 3<br>####&nbsp;Heading 4<br>#####&nbsp;Heading 5<br>######&nbsp;Heading 6</p></blockquote><p>Italics</p><blockquote><p>*Italicised*  or _Italicised_</p></blockquote><p>Bold</p><blockquote><p>*<em>Bold*</em> or  _<em>Bold_</em></p></blockquote><p>Strikethrough</p><blockquote><p>~<del>Oh no</del></p></blockquote><p>Blockquotes</p><blockquote><p>&gt; This is a block quote.<br>&gt;&gt; This is a nested block quote.</p></blockquote><p>Unordered Lists (* or + or -)</p><blockquote><p>* Item<br>&nbsp;&nbsp;&nbsp;* Sub item<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Subsub item<br>* Item<br>* Item<br>* Item</p></blockquote><p>Ordered Lists</p><blockquote><p>1. Item<br>2. Item<br>3. Item<br>&nbsp;&nbsp;&nbsp; 1. Sub Item<br>&nbsp;&nbsp;&nbsp; 2. Sub Item</p></blockquote><p>Code Blocks</p><blockquote><p>Code is indented by four spaces or a tab.</p><p>or</p><p>```<br>  print(“Hello World”);<br>```</p></blockquote><p>Code Spans</p><blockquote><p>To print Hello world, `print “Hello world”`</p></blockquote><p>Syntax Highlighting</p><blockquote><p>   ```python<br>   &nbsp;if language == ‘python’:<br>   &nbsp;&nbsp;&nbsp;&nbsp;    show_syntax_highlighting()<br>   ```</p></blockquote><p>Horizontal Rules</p><blockquote><p>*** or  —</p></blockquote><p>Tables</p><blockquote><p>| First Header  | Second Header |<br>| ————- | ————- |<br>| Content Cell  | Content Cell  |<br>| Content Cell  | Content Cell  |</p></blockquote><p>Links</p><blockquote><p>[Link text](<a href="http://link.com/" rel="noopener" target="_blank">http://link.com/</a> “title ..”)</p></blockquote><p>Images</p><blockquote><p>![Alt text](/path/to/img.jpg “title ..”)</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Headings&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;#&amp;nbsp;Heading 1&lt;br&gt;##&amp;nbsp;Heading 2&lt;br&gt;###&amp;nbsp;Heading 3&lt;br&gt;####&amp;nbsp;Heading 4&lt;br&gt;#####&amp;nbsp;Heading 5&lt;b
      
    
    </summary>
    
    
      <category term="cheatsheet" scheme="https://aghae.github.io/categories/cheatsheet/"/>
    
    
  </entry>
  
  <entry>
    <title>A free serverless contact form</title>
    <link href="https://aghae.github.io/post/server-contact-form/"/>
    <id>https://aghae.github.io/post/server-contact-form/</id>
    <published>2019-07-28T20:24:25.000Z</published>
    <updated>2019-09-29T16:08:31.455Z</updated>
    
    <content type="html"><![CDATA[<p>Why go serverless?</p><p>There are many benefits of making serverless applications, but in short, the main benefits are easy setup, no management, and less cost (free).</p><p>simple contact form with <a href="https://formspree.io" rel="noopener" target="_blank">formspree</a></p><a id="more"></a> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"https://formspree.io/foo@bar"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">'option'</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"opt1"</span>&gt;</span>Option1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"opt2"</span>&gt;</span>Option2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">70</span>  <span class="attr">row</span>=<span class="string">7</span>  <span class="attr">name</span>=<span class="string">'comment'</span>&gt;</span>Contact form test<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Send"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Formspree is  open source project (view on Github,) and they provide instructions on how to run your own instance of Formspree on Heroku.</p><p>Formspree uses reCAPTCHA to identify spam submissions. You can also add a honeypot field to your form with the name _gotcha.<br>Extensibility</p><p>You can start using Formspree without even visiting their website. Just point your form to <a href="https://formspree.io/$YOUR_EMAIL" rel="noopener" target="_blank">https://formspree.io/$YOUR_EMAIL</a> where $YOUR_EMAIL is the email you want submissions to be sent to. Once the form is configured correctly, submit it once. You should then receive an email from Formspree asking you to confirm your email address.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Why go serverless?&lt;/p&gt;
&lt;p&gt;There are many benefits of making serverless applications, but in short, the main benefits are easy setup, no management, and less cost (free).&lt;/p&gt;
&lt;p&gt;simple contact form with &lt;a href=&quot;https://formspree.io&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;formspree&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="serverless" scheme="https://aghae.github.io/categories/serverless/"/>
    
    
  </entry>
  
  <entry>
    <title>insert javascript google recaptcha into your page</title>
    <link href="https://aghae.github.io/post/insert%20javascript%20google%20recaptcha%20into%20your%20page/"/>
    <id>https://aghae.github.io/post/insert javascript google recaptcha into your page/</id>
    <published>2019-07-19T19:51:28.000Z</published>
    <updated>2019-09-29T16:46:52.619Z</updated>
    
    <content type="html"><![CDATA[<p>pure javasript code for recatcha on serverless apps</p><a id="more"></a> <style>    msg-error {    color: #c65848;    }    .g-recaptcha.error {    border: solid 2px #c64848;    padding: .2em;    width: 19em;    }</style><div id="captcha_container"></div><button onclick="validate()">Validate reCAPTCHA</button><script>    var captchaContainer = null;    var loadCaptcha = function() {        captchaContainer = grecaptcha.render('captcha_container', {            'sitekey' : 'Your sitekey',            'callback' : function(response) {            console.log(response);            }        });    };    function validate(){        response = grecaptcha.getResponse();        if (response.length === 0) {             console.log('invalidate')        } else {            console.log('validated')        }    }</script><script src="https://www.google.com/recaptcha/api.js?onload=loadCaptcha&render=explicit" async defer></script><p>insert this into your html page:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"captcha_container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">'validate()'</span>&gt;</span>Validate reCAPTCHA<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css  style :</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-tag">msg-error</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#c65848</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.g-recaptcha</span><span class="selector-class">.error</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">2px</span> <span class="number">#c64848</span>;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">19em</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>and this is javascript for rendering google recaptcha &amp; validation it. put it <code>Your sitekey</code> for value of google recaptcha sitekey</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> captchaContainer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> loadCaptcha = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        captchaContainer = grecaptcha.render(<span class="string">'captcha_container'</span>, &#123;</span><br><span class="line">            <span class="string">'sitekey'</span> : <span class="string">'Your sitekey'</span>,</span><br><span class="line">            <span class="string">'callback'</span> : <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        response = grecaptcha.getResponse();</span><br><span class="line">        <span class="keyword">if</span> (response.length === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'err : invalidate'</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'succ: validated'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script src="https:/</span><span class="regexp">/www.google.com/</span>recaptcha/api.js?onload=loadCaptcha&amp;render=explicit<span class="string">" async defer&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pure javasript code for recatcha on serverless apps&lt;/p&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="https://aghae.github.io/categories/Javascript/"/>
    
    
      <category term="security" scheme="https://aghae.github.io/tags/security/"/>
    
  </entry>
  
</feed>
